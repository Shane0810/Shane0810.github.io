{"meta":{"title":"Shane","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2020-05-05T02:25:58.959Z","updated":"2020-05-05T02:21:49.831Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"Repositories","date":"2020-05-05T04:42:54.207Z","updated":"2020-05-05T04:42:54.207Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot:diy启动类","slug":"SpringBoot-diy启动类","date":"2020-05-12T05:29:27.000Z","updated":"2020-05-12T05:34:00.402Z","comments":true,"path":"2020/05/12/SpringBoot-diy启动类/","link":"","permalink":"http://yoursite.com/2020/05/12/SpringBoot-diy%E5%90%AF%E5%8A%A8%E7%B1%BB/","excerpt":"","text":"SpringBoot: diy启动类SpringBoot启动类分析在springboot的依赖中，我们通过添加各种启动类，可以省去很多配置的麻烦。因此要想自定义一个启动类，了解其实现也是很重要的一环。 在此，通过堆webAutoconfiguration的分析来认识一个启动类的结构。 主要包含两个项目，一个是spring-boot-starter-web,他是一个空的jar包，其依赖了autoconfiguration这个包，也就是spring-boot-starter-autoconfiguration，因此能够直接使用其中的WebMvcAutoConfiguration自动配置类。 问题来了，如果这个spring-boot-starter-autoconfiguration中的所有配置类都注册岂不是太浪费资源。解决的办法就是增加@Conditional 注解，比如对于WebMvcAutoConfiguration: 拓展： 只有在其中的类存在的时候才会生效，因此这个条件很重要。 1@ConditionalOnMissingBean(WebMvcConfigurationSupport.class) 这个条件和@EnableWebMvc 矛盾，只要在一个类，比如自定义一个WebMVC配置类，上增加@EnableWebMvc注解，就会完全接管WebMvc的控制，所以官方文档建议在拓展WebMvc的配置的时候，不能增加该注解。 结论： 其实写自己启动器也就是大致5个步骤 1：编写自己具体的业务，根据自己的需求。 2：xxxProperties配置文件的编写 3：xxxAutoConfigure的编写 4：将我们的启动类放到springboot项目中的resouces/META-INT下面的spring.factories（这个目录以及文件需要自己手动建） 5：将自己编写的自动配置安装到Maven仓库即可。 6：测试。 说明 官方命名： 前缀：spring-boot-starter-xxx 比如：spring-boot-starter-web…. 自定义命名： xxx-spring-boot-starter 比如：mybatis-spring-boot-starter DIY一个启动类1、首先新建一个空项目（Empty project）spring-boot-starter-diy 然后添加一个普通Maven模块：shane-spring-boot-starter 添加一个springboot模块: shane-spring-boot-starter-autoconfigure，删掉pom中的除spring-boot-starter之外的所有依赖。并且删除不必要的文件夹 项目结构如图： 2、在spring-boot-starter-diy的pom文件中，添加依赖 123456789&lt;!--启动器--&gt; &lt;dependencies&gt;&lt;!-- 引入自动配置模块--&gt; &lt;dependency&gt; &lt;groupId&gt;com.shane&lt;/groupId&gt; &lt;artifactId&gt;shane-spring-boot-starter-autoconfigure&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 3、接下来在包com.shane下新建HelloService, HelloProperties, HelloServiceAutoConfiguration HelloService: 服务目标是，针对输入的字符串，自动增加前后缀 1234567891011121314151617package com.shane;public class HelloService &#123; HelloProperties helloProperties; public HelloProperties getHelloProperties() &#123; return helloProperties; &#125; public void setHelloProperties(HelloProperties helloProperties) &#123; this.helloProperties = helloProperties; &#125; public String sayHello(String name)&#123; return helloProperties.getPrefix() + name + helloProperties.getSuffix(); &#125;&#125; HelloProperties 12345678910111213141516171819202122232425package com.shane;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = \"shane.hello\")public class HelloProperties &#123; private String prefix; private String suffix; public String getPrefix() &#123; return prefix; &#125; public void setPrefix(String prefix) &#123; this.prefix = prefix; &#125; public String getSuffix() &#123; return suffix; &#125; public void setSuffix(String suffix) &#123; this.suffix = suffix; &#125;&#125; HelloServiceAutoConfiguration 123456789101112131415161718192021package com.shane;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@ConditionalOnWebApplication//web应用生效@EnableConfigurationProperties(HelloProperties.class)public class HelloServiceAutoConfiguration &#123; @Autowired HelloProperties helloProperties; @Bean public HelloService helloService()&#123; HelloService service=new HelloService(); service.setHelloProperties(helloProperties); return service; &#125;&#125; 4、在resource\\META-INF下新建spring.factories 123# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\com.shane.HelloServiceAutoConfiguration 5、添加到Maven工程中 测试新建一个springboot工程，并添加web依赖 添加自定义启动类的依赖 123456&lt;!--自定义的启动类--&gt;&lt;dependency&gt; &lt;groupId&gt;com.shane&lt;/groupId&gt; &lt;artifactId&gt;shane-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt; 导入之后 成功导入jar包 编写Controller类验证 1234567891011121314151617package com.shane.controller;import com.shane.HelloService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloController &#123; @Autowired HelloService helloService; @RequestMapping(\"/hello\") public String hello()&#123; return helloService.sayHello(\"sxj\"); &#125;&#125; 在配置文件appliacation.properties中添加 12shane.hello.prefix&#x3D;&quot;hi,&quot;shane.hello.suffix&#x3D;&quot;,welcome!&quot; 运行：","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]},{"title":"SSM整合学习笔记","slug":"SSM整合学习笔记","date":"2020-05-10T13:13:13.000Z","updated":"2020-05-10T13:32:51.749Z","comments":true,"path":"2020/05/10/SSM整合学习笔记/","link":"","permalink":"http://yoursite.com/2020/05/10/SSM%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"SSM整合（模板）首先声明一下环境 12345JDK：1.8Tomcat：8.5.54Idea：2019MySQL：5.7.29Maven：3.6.3 创建一个数据库 123456789101112131415161718CREATE DATABASE `ssmbuild`;USE `ssmbuild`;DROP TABLE IF EXISTS `books`;CREATE TABLE `books` (`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT '书id',`bookName` VARCHAR(100) NOT NULL COMMENT '书名',`bookCounts` INT(11) NOT NULL COMMENT '数量',`detail` VARCHAR(200) NOT NULL COMMENT '描述',KEY `bookID` (`bookID`)) ENGINE=INNODB DEFAULT CHARSET=utf8INSERT INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`)VALUES (1,'Java',1,'从入门到放弃'),(2,'MySQL',10,'从删库到跑路'),(3,'Linux',5,'从进门到进牢'); 新建工程SSM_Template，导入Maven依赖。包括mybatis，mybatis-spring，springmvc，junit，servlet，jsp，数据库MySQL驱动，数据库连接池（这里使用c3p0） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;dependencies&gt; &lt;!--Junit--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; &lt;!--数据库驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.15&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.5.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--Servlet - JSP --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--Mybatis--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;2.0.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--Spring--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;5.1.9.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;5.1.9.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 同时配置资源过滤设置 1234567891011121314151617181920&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt; （由于新建工程时，没有选择任何模板，因此不要忘记在ＷEb-INF中引入lib目录，并导入所有的jar包，（一定不能漏掉） 创建好所有的包目录 com.shane.dao com.shane.service com.shane.pojo com.shane.controller 1. Mybatis层新建dao接口和对应的mapper配置文件 新建UserDao接口 123456789101112public interface BooksDao &#123; //增加一本书 int addBook(Books books); //删除一本书 int deleteBookById(@Param(\"bookId\") int id); //更新一本书 int updateBook(Books books); //查询一本书 Books queryByBookId(int id); //查询所有书 List&lt;Books&gt; queryAllBook();&#125; 同时创建对应的Mapper配置文件，BooksDaoMapper.xml 123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.shane.dao.BooksDao\"&gt; &lt;insert id=\"addBook\" parameterType=\"Books\"&gt; insert into ssmbuild.books(bookName, bookCounts, detail) values (#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;); &lt;/insert&gt; &lt;delete id=\"deleteBookById\" parameterType=\"int\"&gt; delete from ssmbuild.books where bookID=#&#123;bookId&#125; &lt;/delete&gt; &lt;update id=\"updateBook\" parameterType=\"Books\"&gt; update ssmbuild.books set bookName=#&#123;bookName&#125;,bookCounts=#&#123;bookCounts&#125;,detail=#&#123;detail&#125; where bookID=#&#123;bookId&#125;; &lt;/update&gt; &lt;select id=\"queryBookById\" resultType=\"Books\"&gt; select * from ssmbuild.books where bookID=#&#123;bookId&#125; &lt;/select&gt; &lt;select id=\"queryAllBook\" resultType=\"Books\"&gt; select * from ssmbuild.books &lt;/select&gt;&lt;/mapper&gt; 配置mybatis，创建Mybatis-config.xml，其中配置数据源的部分交给spring完成。 12345678910111213&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=\"com.shane.pojo\"/&gt; &lt;/typeAliases&gt; &lt;mappers&gt; &lt;mapper resource=\"com/shane/dao/BooksDaoMapper.xml\"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 2. Spring层 整合mybatis，新建配置文件spirng-dao.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\"&gt; &lt;!-- 配置整合mybatis --&gt; &lt;!-- 1.关联数据库文件 --&gt; &lt;context:property-placeholder location=\"classpath:database.properties\"/&gt; &lt;!-- 2.数据库连接池 --&gt; &lt;!--数据库连接池 dbcp 半自动化操作 不能自动连接 c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面） --&gt; &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;!-- 配置连接池属性 --&gt; &lt;property name=\"driverClass\" value=\"$&#123;jdbc.driver&#125;\"/&gt; &lt;property name=\"jdbcUrl\" value=\"$&#123;jdbc.url&#125;\"/&gt; &lt;property name=\"user\" value=\"$&#123;jdbc.username&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\"/&gt; &lt;!-- c3p0连接池的私有属性 --&gt; &lt;property name=\"maxPoolSize\" value=\"30\"/&gt; &lt;property name=\"minPoolSize\" value=\"3\"/&gt; &lt;!-- 关闭连接后不自动commit --&gt; &lt;property name=\"autoCommitOnClose\" value=\"false\"/&gt; &lt;!-- 获取连接超时时间 --&gt; &lt;property name=\"checkoutTimeout\" value=\"10000\"/&gt; &lt;!-- 当获取连接失败重试次数 --&gt; &lt;property name=\"acquireRetryAttempts\" value=\"2\"/&gt; &lt;/bean&gt;&lt;!-- 3.配置sqlSessionFactory--&gt; &lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt;&lt;!-- 注入数据源--&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;&lt;!-- 绑定mybatis--&gt; &lt;property name=\"configLocation\" value=\"classpath:Mybatis-config.xml\"/&gt; &lt;/bean&gt; &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt; &lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt; &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;!-- 注入sqlSessionFactory --&gt; &lt;property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/&gt; &lt;!-- 给出需要扫描Dao接口包 --&gt; &lt;property name=\"basePackage\" value=\"com.shane.dao\"/&gt; &lt;/bean&gt;&lt;/beans&gt; 整合service层，新建spring-service.xml 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"&gt;&lt;!--1.扫描service相关的bean--&gt; &lt;context:component-scan base-package=\"com.shane.service\"/&gt; &lt;!--BookServiceImpl注入到ioc容器中--&gt; &lt;bean id=\"bookServiceImpl\" class=\"com.shane.service.BooksServiceImpl\"&gt; &lt;property name=\"bookMapper\" ref=\"booksDao\"/&gt; &lt;/bean&gt; &lt;!-- 配置事务管理器 --&gt; &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;!-- 注入数据库连接池 --&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;/bean&gt;&lt;/beans&gt; 3. SpringMVC层添加web支持之后，配置web.xml 123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\"&gt; &lt;!--注册dispatcherServlet--&gt; &lt;servlet&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!--乱码问题--&gt; &lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!--Session过期时间--&gt; &lt;session-config&gt; &lt;session-timeout&gt;15&lt;/session-timeout&gt; &lt;/session-config&gt;&lt;/web-app&gt; 配置mvc，创建spring-mvc.xml 1234567891011121314151617181920212223242526272829&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt; &lt;!-- 配置SpringMVC --&gt; &lt;!-- 1.开启SpringMVC注解驱动 --&gt; &lt;mvc:annotation-driven /&gt; &lt;!-- 2.静态资源默认servlet配置--&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!--配置视图解析器--&gt; &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" /&gt; &lt;!--注意在这边的prefix中，WEB—INF前面一定要加“/”，否则404欢迎你--&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt; &lt;property name=\"suffix\" value=\".jsp\"/&gt; &lt;/bean&gt; &lt;!-- 4.扫描web相关的bean --&gt; &lt;context:component-scan base-package=\"com.shane.controller\" /&gt;&lt;/beans&gt; 整合spring的配置文件，新建applicationContext.xml 123456789&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt; &lt;import resource=\"spring-service.xml\"/&gt; &lt;import resource=\"spring-dao.xml\"/&gt; &lt;import resource=\"spring-mvc.xml\"/&gt;&lt;/beans&gt; 到处为止，所有的配置都已经结束。 4. 新建controller测试web1234567891011121314@Controller@RequestMapping(\"/book\")public class SSMController &#123; @Autowired @Qualifier(\"bookServiceImpl\") private BooksService booksService; @RequestMapping(\"/allBook\") public String findAll(Model model)&#123; List&lt;Books&gt; books=booksService.queryAllBook(); model.addAttribute(\"booklist\",books); return \"hello\"; &#125;&#125; 视图的建立 index.jsp 123456789&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;$Title$&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=\"$&#123;pageContext.request.contextPath&#125;/book/allBook\"&gt;点击进入列表页&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; hello.jsp 123456789&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;hi,ssm&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 运行即可。 测试数据库操作是否正确 新建测试类MyTest.java 1234567891011public class MyTest &#123; @Test public void test()&#123; ApplicationContext context=new ClassPathXmlApplicationContext(\"applicationContext.xml\"); BooksService bookServiveImpl=(BooksService) context.getBean(\"bookServiceImpl\"); for(Books books:bookServiveImpl.queryAllBook())&#123; System.out.println(books); &#125; &#125;&#125; 运行结果为 成功。","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}]},{"title":"SpringMVC之入门","slug":"SpringMVC之入门","date":"2020-05-09T05:15:39.000Z","updated":"2020-05-09T05:23:59.494Z","comments":true,"path":"2020/05/09/SpringMVC之入门/","link":"","permalink":"http://yoursite.com/2020/05/09/SpringMVC%E4%B9%8B%E5%85%A5%E9%97%A8/","excerpt":"","text":"SpringMVC什么是MVC MVC是一个简写：Model、View、Controller。是一种软件设计的规范，一种架构模式 将业务逻辑、数据、显示分离出来 降低了视图和业务逻辑之间的双向耦合 Model：数据模型，提供要展示的数据，包含数据和行为，可以认为是JavaBean组件。一般现在都分离开来：数据Dao和服务层（行为Service）。 View：负责模型的展示，就是我们所见到的用户界面。 Controller：接收用户请求，委托给模型处理，处理完毕后返回给视图，控制器做了调度的工作。在之前，其实都是指Servlet。 实体类的细分：pojo：可以分为userVO, dto Model1时代主要分为两层，视图层和模型层。 Model2分为MVC三层。 步骤: 用户发送请求 Servlet接收请求数据,并调用对应的业务逻辑方法 业务处理完毕, 返回更新后的数据给servlet servlet转向到JSP,由JSP来渲染页面 响应给前端更新后的页面 Model: 业务逻辑, 保存数据的状态 Controller: 接收表单数据, 调用业务逻辑, 转向指定的页面 View: 显示页面. 什么是 SpringMVC spring的web框架围绕dispatcherServlet设计 使用xml配置文件入门springmvc通过这个小项目,来理解springmvc的工作原理 新建新的子项目springmvc-02-hello,导入依赖 12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springMVCkuang&lt;/artifactId&gt; &lt;groupId&gt;com.kuang&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;springmvc-02-hello&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;5.1.9.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 配置web.xml,注册dispatcherServlet 12345678910111213141516171819202122232425262728&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\"&gt; &lt;!--1.注册DispatcherServlet--&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;!--启动级别-1--&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt; &lt;!--/* 匹配所有的请求；（包括.jsp）--&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 3、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml 说明，这里的名称要求是按照官方来的 12&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;&lt;/beans&gt; 4、添加 处理映射器 1&lt;bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/&gt; 5、添加 处理器适配器 1&lt;bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/&gt; 6、添加 视图解析器 1234567&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;&lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" id=\"InternalResourceViewResolver\"&gt; &lt;!--前缀--&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\"/&gt; &lt;!--后缀--&gt; &lt;property name=\"suffix\" value=\".jsp\"/&gt;&lt;/bean&gt; 7、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图； 1234567891011121314151617181920package com.kuang.controller;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.mvc.Controller;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class HelloController implements Controller &#123; public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; //ModelAndView 模型和视图 ModelAndView mv = new ModelAndView(); //封装对象，放在ModelAndView中。Model mv.addObject(\"msg\",\"HelloSpringMVC!\"); //封装要跳转的视图，放在ModelAndView中 mv.setViewName(\"hello\"); //: /WEB-INF/jsp/hello.jsp return mv; &#125;&#125; 8、将自己的类交给SpringIOC容器，注册bean 1&lt;!--Handler--&gt;&lt;bean id=\"/hello\" class=\"com.kuang.controller.HelloController\"/&gt; 9、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面； 123456789&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;$&#123;msg&#125;&lt;/body&gt;&lt;/html&gt; 10、配置Tomcat 启动测试！ 注意:在tomcat配置中,需要将此设置 为”/“ 可能遇到的问题：访问出现404，排查步骤： 查看控制台输出，看一下是不是缺少了什么jar包。 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！ 重启Tomcat 即可解决！ 执行原理 注解版 新建module,命名为springmvc-servlet-anno 在web.xml中注册dispatcherservlet 12345678910111213141516171819&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\"&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc-servlet-anno.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 然后在resource目录下配置springmvc的配置文件,命名为springmvc-servlet-anno. 同时配置处理器映射器处理器适配器,以及视图解析器. 1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt; &lt;!--自动扫描包，让指定包下的注解生效，由IOC容器统一管理--&gt; &lt;context:component-scan base-package=\"com.kuangsheng.controller\"&gt;&lt;/context:component-scan&gt; &lt;!-- 让Spring MVC不处理静态资源 --&gt; &lt;mvc:default-servlet-handler /&gt; &lt;!-- 支持mvc注解驱动 在spring中一般采用@RequestMapping注解来完成映射关系 要想使@RequestMapping注解生效 必须向上下文中注册DefaultAnnotationHandlerMapping 和一个AnnotationMethodHandlerAdapter实例 这两个实例分别在类级别和方法级别处理。 而annotation-driven配置帮助我们自动完成上述两个实例的注入。 --&gt; &lt;mvc:annotation-driven /&gt; &lt;!-- 视图解析器 --&gt; &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" id=\"internalResourceViewResolver\"&gt; &lt;!-- 前缀 --&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt; &lt;!-- 后缀 --&gt; &lt;property name=\"suffix\" value=\".jsp\" /&gt; &lt;/bean&gt;&lt;/beans&gt; 新建com.kuangsheng.controller.HelloController 1234567891011121314package com.kuangsheng.controller;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class HelloController &#123; @RequestMapping(\"/hello\")//访问路径为localhost8080/hello public String sayHello(Model model)&#123; model.addAttribute(\"msg\",\"helloMvc\"); return \"hello\";//直接交给视图解析器,转到/WEB-INF/jsp/hello.jsp &#125;&#125; 注意404错误,同上的解决方案.考虑lib目录","categories":[],"tags":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://yoursite.com/tags/SpringMVC/"}]}],"categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"},{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://yoursite.com/tags/SpringMVC/"}]}